package main

import (
	"fmt"
	"math"
)

const E = 0.0001 // –∑–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø–æ —É—Å–ª–æ–≤–∏—é

// –§—É–Ω–∫—Ü–∏—è ùë• ùëôùëõ(ùë• + 1) = 1 (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º)
func f(x float64) float64 {
	return (x * math.Log(x+1) - 1)
}

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ f(x)
func f1(x float64) float64 {
	return x / (x + 1) + math.Log(x + 1)
}

// –ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
func halfDivision(a, b float64) (float64, int) {
	if f(a)*f(b) >= 0 {
		fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
		return 0, 0
	}

	var c, k float64
	for math.Abs(b-a) >= E {
		c = (a + b) / 2
		fmt.Printf("–ò—Ç–µ—Ä–∞—Ü–∏—è %d: a=%.4f, b=%.4f, c=%.4f, f(c)=%.4f\n", int(k), a, b, c, f(c))
		if f(c) == 0 {
			break
		} else if f(c)*f(a) < 0 {
			b = c
		} else {
			a = c
		}
		k++
	}

	return c, int(k)
}

// –ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞
func newtonMethod(x0 float64) (float64, int) {
	var x1, k float64
	x1 = x0 - f(x0)/f1(x0)

	for math.Abs(x1-x0) >= E {
		fmt.Printf("–ò—Ç–µ—Ä–∞—Ü–∏—è %d: x0=%.4f, x1=%.4f, f(x1)=%.4f\n", int(k), x0, x1, f(x1))
		x0 = x1
		x1 = x0 - f(x0)/f1(x0)
		k++
	}

	return x0, int(k)
}

// –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
func simpleIterations(x0 float64) (float64, int) {
	var x1, k float64
	x1 = 1 / math.Log(x0+1)

	for math.Abs(x1-x0) > E {
		fmt.Printf("–ò—Ç–µ—Ä–∞—Ü–∏—è %d: x0=%.4f, x1=%.4f, f(x1)=%.4f\n", int(k), x0, x1, f(x1))
		x0 = x1
		x1 = 1 / math.Log(x0+1)
		k++
	}

	return x0, int(k)
}

func main() {
	var roots []float64

	fmt.Println("–ü—Ä–æ—Ü–µ—Å—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ E")
	root, s1 := halfDivision(-1, 1)
	roots = append(roots, root)

	fmt.Println("\n–ü—Ä–æ—Ü–µ—Å—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º –ù—å—é—Ç–æ–Ω–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ E")
	root, s2 := newtonMethod(10)
	roots = append(roots, root)

	fmt.Println("\n–ü—Ä–æ—Ü–µ—Å—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ E")
	root, s3 := simpleIterations(2)
	roots = append(roots, root)

	fmt.Println("\n–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
	for _, root := range roots {
		fmt.Printf("%f ", root)
	}

	fmt.Println("\n\n–°–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏: ")
	fmt.Printf("\n–º–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è: %d –∏—Ç–µ—Ä–∞—Ü–∏–π\n", s1)
	fmt.Printf("\n–º–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞: %d –∏—Ç–µ—Ä–∞—Ü–∏–π\n", s2)
	fmt.Printf("\n–º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π: %d –∏—Ç–µ—Ä–∞—Ü–∏–π\n", s3)
}